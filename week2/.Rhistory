select_vec1 <- vector3[1:2]
select_vec1
select_vec2 <- vector3[c(1,2)]
select_vec2
select_vec1 <- vector3[1]
select_vec1
select_vec2 <- vector3[1:2]
select_vec2
select_vec3 <- vector3[c(1,2)]
select_vec3
select_vec4 <- vector3["America"]
select_vec4
select_vec5 <- vector3[c("America","Frances")]
select_vec5
c(vector1,vector2)
vector1 <- c(100,300,500)
vector2 <- c(200,200,-100)
vector3 <- vector1 + vector2 #向量能直接進行運算
vector3
vector4<-c(vector1,vector2)
vector4
rquote<-("Everyday is the best day.")
strsplit(rquote, split = "")[[1]]
rquote<-("Everyday is the best day.")
strsplit(rquote, split = "")
rquote<-("Everyday is the best day.")
strsplit(rquote, split = " ")
rquote<-(c("Everyday is the best day.","Isn't it?"))
strsplit(rquote, split = " ")
rquote<-(c("Everyday is the best day.","Isn't it?"))
strsplit(rquote, split = " ")[[1]]
rquote<-(c("Everyday is the best day.","Isn't it?"))
strsplit(rquote, split = " ")
rquote<-(c("Everyday is the best day.","Isn't it?"))
strsplit(rquote, split = " ")
strsplit(rquote, split = " ")[[1]]
#星際大戰票房
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
#宣告 box_office(vector)
box_office <- c(new_hope, empire_strikes, return_jedi)
#建立 star_wars_matrix
star_wars_matrix <- matrix(box_office, byrow = T, nrow = 3)
#一個具有 3 列(narrow = 3)的矩陣，數值(box_office)依序以列(byrow = TRUE)方向填入
star_wars_matrix
#用來命名的向量 region 與 titles
region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
#colnames()是欄命名function
colnames(star_wars_matrix) <- region
#rownames()是列命名function
rownames(star_wars_matrix) <- titles
star_wars_matrix
dimnames(star_wars_matrix) = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"),c("US", "non-US"))
star_wars_matrix
#rowSums()列總和(colSums()欄總和)
worldwide <- rowSums(star_wars_matrix)
worldwide
#cbind()欄合併(rbind()列合併)
all_wars_matrix <- cbind(star_wars_matrix, worldwide)
all_wars_matrix
#rowSums()列總和(colSums()欄總和)
worldwide <- rowSums(star_wars_matrix)
worldwide
#cbind()欄合併(rbind()列合併)
all_wars_matrix <- cbind(star_wars_matrix, worldwide)
all_wars_matrix
#選出全部電影的美國票房收入
us_all <- all_wars_matrix[,1]
us_all
#選出前兩部電影的非美國票房收入
non_us_some <- all_wars_matrix[1:2,2]
non_us_some
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
factor_survey_vector
#使用levels()重新命名級別，，預設以字母排序
levels(factor_survey_vector) <- c('Female', 'Male')
factor_survey_vector
#使用summary()產出摘要，注意summary(survey_vector)結果不同
summary(survey_vector)
#使用summary()產出摘要
#注意summary(survey_vector)結果不同，factoris better than vector
summary(survey_vector)
summary(factor_survey_vector)
#使用summary()產出摘要
#注意summary(survey_vector)結果不同，factoris better than vector
summary(survey_vector)
summary(factor_survey_vector)
#使用summary()產出摘要
#注意summary(survey_vector)結果不同，factoris better than vector
summary(survey_vector)
<br />
#使用summary()產出摘要
#注意summary(survey_vector)結果不同，factoris better than vector
summary(survey_vector)
summary(factor_survey_vector)
#使用factor()建立順序類別
speed_vector <- c("fast", "slow", "slow", "fast", "insane")
factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "fast", "insane"))
factor_speed_vector
#選出資料
da2 <- factor_speed_vector[2]
da5 <- factor_speed_vector[5]
da2
da5
#資料分析師 2 是否比資料分析師 5 快？
da2 > da5
### order()重新以欄位數值排列
mtcars[,order(qsec)]
### order()重新以欄位數值排列
mtcars[,order(mtcars$qsec)]
mtcars$qsec
### order()重新以欄位數值排列
mtcars[order(mtcars$qsec),]
#使用list()組合各種資料，同時分別命名
my_vector <- 1:10
my_matrix <- matrix(1:9, ncol = 3)
my_df <- mtcars[1:3,]
my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)
my_list
#使用list()組合各種資料，同時分別命名
my_vector <- 1:10
my_matrix <- matrix(1:9, ncol = 3)
my_df <- mtcars[1:3,]
my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)
my_list
#使用list()組合各種資料，同時分別命名
my_vector <- 1:10
my_matrix <- matrix(1:9, ncol = 3)
my_df <- mtcars[1:3,1:3]
my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)
my_list
names(my_list) <- c("vector", "matrix","dataframe")
my_list2 <- list("vector" = my_vector, "matrix" = my_matrix ,"dataframe"=my_df )
names(my_list1) <- c("vector", "matrix","dataframe")
names(my_list) <- c("vector", "matrix","dataframe")
my_list
my_list2 <- list("vector" = my_vector, "matrix" = my_matrix ,"dataframe"=my_df )
my_list2
#運用[[]]選出清單中的特定資料，再使用[]選出該指定資料的內容
my_list[["dataframe"]][2,]
my_list[[1]][1]
my_list$matrix
vecme<-vector(1,2,3,4,5)
vecme<-c(1,2,3,4,5)
ext_list <- c(my_list, "my_vvec" = vecme)
vecme<-c(1,2,3,4,5)
ext_list <- c(my_list, "my_vvec" = vecme)
ext_list
vecme
c(T, T, F) & c(T, F, F)#and
c(T, T, F) && c(T, F, F)#only the first one
c(T, T, F) | c(T, F, F)
c(T, T, F) || c(T, F, F)#only the first one
number = 4
if (number < 10) {
if (number < 5) {
result <- "extra small"
} else {
result <- "small"
}
} else if (number < 100) {
result <- "medium"
} else {
result <- "large"
}
print(result)
i <- 1
while (i <= 10) {
print(3*i)
if (3*i%%8 == 0) {
break
}
i <- i + 1
}
nyc <- list(pop = 8405837,
boroughs = c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island"),
capital = FALSE)
# Loop version 1
for (p in nyc) {
print(p)
}
for (i in 1:length(nyc)) {
print(nyc[[i]])
}
ttt <- matrix(c('O',NA,'X',NA,'O','O','X',NA,'X'), nrow = 3, byrow = T)#建構矩陣
ttt
for (i in 1) {#只抓出第一列
for (j in 1:ncol(ttt)) {
print(paste("On row", i ,"and column", j ,"the board contains" ,ttt[i,j]))
}
}
for (i in 1:nrow(ttt)) {#只抓出第一列
for (j in 1:ncol(ttt)) {
print(paste("On row", i ,"and column", j ,"the board contains" ,ttt[i,j]))
}
}
for (i in 1) {#只抓出第一列
for (j in 1:ncol(ttt)) {
print(paste("On row", i ,"and column", j ,"the board contains" ,ttt[i,j]))
}
}
rquote <- "rSTUDIO needs lots of practice!"
chars <- strsplit(rquote, split = "")[[1]]#strspilt()將句子裁切，""中放裁切條件
chars
rquote <- "rSTUDIO needs lots of practice!"
chars <- strsplit(rquote, split = "")[[1]]#strspilt()將句子裁切，""中放裁切條件
chars
rcount <- 0
for (char in chars) {
if(char == 'r') {
rcount = rcount + 1
}
if(char == 'u') {
break
}
}
rcount
rquote <- "rSTUDIO needs lots of practice!"
chars <- strsplit(rquote, split = "")[[1]]#strspilt()將句子裁切，""中放裁切條件
chars
rcount <- 0
for (char in chars) {
if(char == 'r') {
rcount <- rcount + 1
}
if(char == 'u') {
break
}
}
rcount
help("summary")
args(mean)
help(mean)
args(mean)
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)
mean(abs(linkedin - facebook),na.rm = T)#na.rm決定是否排除NA
abs(linkedin - facebook)
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)
mean(abs(linkedin - facebook),na.rm = T)#na.rm決定是否排除NA
two_dice <- function() {
possibilities <- 1:6
dice1 <- sample(possibilities, size = 1)#sample()隨機選數字
dice2 <- sample(possibilities, size = 1)
return dice1 + dice2
two_dice <- function() {
possibilities <- 1:6
dice1 <- sample(possibilities, size = 1)#sample()隨機選數字
dice2 <- sample(possibilities, size = 1)
return (dice1 + dice2)
}
two_dice()#每次的結果不同
if(!require(ggplot2))install.packages("ggplot2",repos = "http://cran.us.r-project.org")
library(ggplot2)
search()
library(data.table)
require(rjson)
library(data.table)
require(rjson)
library('data.table")
require(rjson)
library(ggplot2)
library(gapminder)
library(ggplot2)
library(dplyr)
search()
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggplot2)
library(dplyr)
lapply(list(1,2,3), function(x, factor) {#Using anonymous functions
x * factor
}
, factor = 3)
list(runif (10), runif (10)
list(runif (10), runif (10))
lapply(list(runif (10), runif (10)),
function(x) c(min = min(x), mean = mean(x), max = max(x)))
runif (10)
lapply(list(runif (10), runif (10)),
function(x) c(min = min(x), mean = mean(x), max = max(x)))
sapply(list(runif (10), runif (10)),
function(x) c(min = min(x), mean = mean(x), max = max(x)))
unlist(lapply(list(runif (10), runif (10)),
function(x) c(min = min(x), mean = mean(x), max = max(x))))
#numeric(3) is the format here.
#numeric refers to classes of variables.
#'3' refers to length.
vapply(list(runif (10), runif (10)),
function(x) c(min = min(x), mean = mean(x), max = max(x)), numeric(3))
seq1 = seq(1, 7, by = 2)
seq1
sort1 = sort(rep1, decreasing = T)
rep1 = rep(seq1, times = 2)
rep1
sort1 = sort(rep1, decreasing = T)
sort1
rev1 = rev(sort1)
rev1
append1 = append(sort1, rev1)
append1
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv", "kiara@@fakemail.edu")
hits =grep(emails, pattern = '@.*\\.edu$')
emails[hits]
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv", "kiara@@fakemail.edu")
hits =grepl(emails, pattern = '@.*\\.edu$')
hits =grep(emails, pattern = '@.*\\.edu$')
emails[hits]
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv", "kiara@@fakemail.edu")
hits1 =grepl(emails, pattern = '@.*\\.edu$')
hits1
hits =grep(emails, pattern = '@.*\\.edu$')
emails[hits]
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv", "kiara@@fakemail.edu")
hits1 =grepl(emails, pattern = '@.*\\.edu$')
hits1
hits2 =grep(emails, pattern = '@.*\\.edu$')
hits2
emails[hits]
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv", "kiara@@fakemail.edu")
hits1 =grepl(emails, pattern = '@.*\\.edu$')
hits1
hits2 =grep(emails, pattern = '@.*\\.edu$')
hits2
emails[hits1]
emails[hits2]
#sub(pattern, replacement, object)
sub("@.*\\.edu$", "@datacamp.edu", emails)
#gsub(pattern, replacement, object)
gsub("@.*\\.edu$", "@datacamp.edu", emails)
awards <- c("Won 1 Oscar.",
"Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
"2 wins & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
awards <- c("Won 1 Oscar.",
"Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
"2 wins & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
gsub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
awards <- c("Won 1 Oscar.",
"Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
" 2 nominations. & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
gsub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
awards <- c("Won 1 Oscar.",
"Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
"Is 2 nominations. & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
gsub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
str1 <- "2012-03-15"
class(str1)
date1 <- as.Date(str1, format = '%Y-%m-%d')
class(date1)
str2 <- "2012-3-12 14:23:08"
class(str2)
time2 <- as.POSIXct(str2, format = '%Y-%m-%d %H:%M:%S')
class(time2)
format(time2, '%I:%M%p')
#Calculations with Dates & Times
as.Date("2015-03-12") - as.Date("2015-02-27")
#Calculations with Dates & Times
as.Date("2015-03-12") - as.Date("2015-02-27")
birth <- as.POSIXct("1879-03-14 14:37:23")
death <- as.POSIXct("1955-04-18 03:47:12")
einstein <- death - birth
einstein
if(!require(ggplot2))install.packages("ggplot2",repos = "http://cran.us.r-project.org")
#install.packages("gapminder")
if(!require(gapminder))install.packages("gapminder",repos = "http://cran.us.r-project.org")
library(ggplot2)
library(dplyr)
library(gapminder)
if(!require(ggplot2))install.packages("ggplot2",repos = "http://cran.us.r-project.org")
if(!require(dplyr))install.packages("dplyr",repos = "http://cran.us.r-project.org")
#install.packages("gapminder")
if(!require(gapminder))install.packages("gapminder",repos = "http://cran.us.r-project.org")
library(ggplot2)
library(dplyr)
library(gapminder)
# Filter for China in 2002
gapminder %>%
filter(country == 'China', year == 2002)
gapminder %>%
filter(year == 1957) %>%
arrange(desc(pop))
gapminder %>%
filter(year == 2007) %>%
mutate(GDP = pop * gdpPercap) %>%
arrange(desc(GDP))
gapminder_1952 <- gapminder %>%
filter(year == 1952)
#Create a scatter plot with pop on the x-axis and lifeExp on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point()
gapminder_1952 <- gapminder %>%
filter(year == 1952)
#Create a scatter plot with pop on the x-axis and lifeExp on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point()+
scale_x_log10()
gapminder_1952 <- gapminder %>%
filter(year == 1952)
#Create a scatter plot with pop on the x-axis and lifeExp on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point()+
scale_x_log10()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point()+
scale_x_log10()#坐標軸以對數值表示
expand_limits(y=0)#y軸從0開始
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point()+
scale_x_log10()#坐標軸以對數值表示
expand_limits(y=0)#y軸從0開始
gapminder %>%
group_by(year, continent) %>%
summarize(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
by_year_continent<-gapminder %>%
group_by(year, continent) %>%
summarize(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
by_year_continent<-gapminder %>%
group_by(year, continent) %>%
summarize(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
by_year_continent
ggplot(by_year_continent, aes(x= year, y = medianGdpPercap,color = continent)) +
geom_point() +
expand_limits(y = 0)
ggplot(by_year_continent, aes(x= year, y = maxGdpPercap,color = continent)) +
geom_point() +
expand_limits(y = 0)
by_year_continent<-gapminder %>%
group_by(year, continent) %>%
summarize(medianLifeExp = median(lifeExp), maxGdpPercap)
by_year_continent<-gapminder %>%
group_by(year, continent) %>%
summarize(medianLifeExp = median(lifeExp), medianGdpPercap = median(gdpPercap))
by_year_continent
ggplot(by_year_continent, aes(x= year, y = medianGdpPercap,color = continent)) +
geom_point() +
expand_limits(y = 0)
ggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +
geom_line() +
expand_limits(y = 0)
by_continent <- gapminder %>%
filter(year == 1952) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap))
ggplot(by_continent, aes(x = continent, y = medianGdpPercap)) +
geom_col()
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop)) +
geom_histogram(binwidth=5) +
scale_x_log10()
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop)) +
geom_histogram(binwidth=2) +
scale_x_log10()
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop)) +
geom_histogram(binwidth=0.5) +
scale_x_log10()
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop)) +
geom_histogram(binwidth=0.3) +
scale_x_log10()
#ggtitle() for adding title for the plot.
ggplot(gapminder_1952, aes(x = continent, y = gdpPercap)) +
geom_boxplot() +
scale_y_log10() +
ggtitle("Comparing GDP per capita across continents")
